#
# On release, we perform the same actions as the push handler, but with a
# specific tagged version. We then:
#
#   * Publish the docker image to the GitHub docker package registry
#   * Publish the client jar to the GitHub
#   * Publish a draft GitHub release
#
name: Release

on: create

jobs:
  publish:
    name: Test and publish
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-java@v1
        with:
          java-version: '8.0.212'
      - name: Build and test
        run: ./gradlew build -PserverImageName=titandata/titan -PtitanVersion=${GITHUB_REF#refs/tags/}
      - uses: actions/setup-go@v1
        with:
          go-version: '1.13.5'
      - name: End to End tests
        run: |
          uname -a
          go test -p 1 -v ./test/docker ./test/remote
        env:
          S3_LOCATION: ${{ secrets.S3_TEST_LOCATION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
      #
      # GITHUB_TOKEN cannot currently be used for pushing docker images, so we
      # have to use a hard-coded secret instead.
      #
      - name: Publish docker image
        run: |
          docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_PASSWORD }}
          ./gradlew publishDockerVersion publishDockerLatest -PserverImageName=titandata/titan -PtitanVersion=${GITHUB_REF#refs/tags/}
      - name: Publish client jar
        run: >
          ./gradlew :client:publish -PmavenBucket=${{ secrets.MAVEN_BUCKET }}
          -PtitanVersion=${GITHUB_REF#refs/tags/}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
