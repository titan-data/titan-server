sourceSets {
    integrationTest {
        kotlin.srcDir 'src/integration-test/kotlin'
        resources.srcDir 'src/integration-test/resources'
        compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
        runtimeClasspath += output + compileClasspath
    }
}

dependencies {
    integrationTestCompile sourceSets.main.output
    integrationTestCompile sourceSets.test.output
    integrationTestCompile configurations.compile
    integrationTestCompile configurations.testCompile
    integrationTestRuntime configurations.runtime
    integrationTestRuntime configurations.testRuntime
    integrationTestRuntime configurations.testImplementation
}

task integrationTest(type: Test) {
    useJUnitPlatform()
    group = LifecycleBasePlugin.VERIFICATION_GROUP
    description = 'Runs the integration tests.'

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath

    binResultsDir = file("$buildDir/integration-test-results/binary/integrationTest")

    reports {
        html.destination = file("$buildDir/reports/integration-test")
        junitXml.destination = file("$buildDir/integration-test-results")
    }

    testLogging {
        events "FAILED", "PASSED", "SKIPPED"
        exceptionFormat "FULL"
        showExceptions true
        showCauses true
        showStackTraces true

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
    outputs.upToDateWhen { false }
    finalizedBy jacocoTestReport

    mustRunAfter tasks.test
}

check.dependsOn integrationTest
