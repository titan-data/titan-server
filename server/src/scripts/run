#!/bin/bash
#
# Copyright The Titan Project Contributors.
#

#
# Main entry point for the titan server. This server can be run in different contexts, such as managing local
# docker containers or kubernetes pods. The behavior is controlled via the TITAN_CONTEXT environemnt variable.
# We currently support two contexts:
#
#   docker-zfs      Controls local containers on your laptops, backing storage via ZFS. The TITAN_IDENTITY
#                   environment variable must be set, which must also match the name of the corresponding storage
#                   pool, and the container must be run via the 'launch' script to ensure that ZFS is properly
#                   configured.
#
#   kubernetes-csi  Controls remote containers running in a kubernetes cluster, backing storage via a CSI
#                   driver. The TITAN_IDENTITY variable must be set to determine where to place the persistent
#                   database in /var/lib/$TITAN_IDENTITY, which should be backed by a persistent volume. Unlike
#                   the docker-zfs context, the server doesn't need to be run via 'launch', and can operate
#                   in any docker environment even if kernel ZFS support isn't present. Additional context
#                   can be passed through the TITAN_CONFIG variable, which is a list of name=value pairs,
#                   separated by commas.
#

function log_error {
  local ts=$(timestamp)
  local msg=$1
  echo "$ts $log_delimiter ERROR $msg"
  exit 1
}

#
# Mount the database filesystem for the titan server.
#
function mount_database() {
  local db_dir=$1
  mount | grep ^$TITAN_IDENTITY/db > /dev/null
  if [[ $? != 0 ]]; then
    echo "Mounting $TITAN_IDENTITY/db at $db_dir"
    mkdir -p $db_dir
    mount -t zfs $TITAN_IDENTITY/db $db_dir || log_error "failed to mount database directory"
  fi
}

#
# Initialize the database
#
function start_database() {
  local db_dir=$1
  local create_db=false
  mkdir -p $db_dir
  if [[ ! -f $db_dir/postgresql.conf ]]; then
    echo "Initializing database at $db_dir"
    chown postgres $db_dir
    su - postgres -c "/usr/lib/postgresql/12/bin/pg_ctl -D $db_dir initdb" || exit 1
    create_db=true
  fi

  # Start postgres
  echo "Starting postgres"
  rm -f $db_dir/postmaster.pid
  su - postgres -c "/usr/lib/postgresql/12/bin/pg_ctl -D $db_dir -l /var/log/postgresql/logfile start"
  if [[ $? == 1 ]]; then
    cat /var/log/postgresql/logfile
    exit 1
  fi
  [[ $create_db == "true" ]] && su - postgres -c "/usr/lib/postgresql/12/bin/createdb titan"
  echo "Postgres started"
}

#
# Check that our context is configured correctly
#
[[ -z $TITAN_CONTEXT ]] && log_error "TITAN_CONTEXT must be set"
[[ -z $TITAN_IDENTITY ]] && log_error "TITAN_IDENTITY must be set"

#
# Check or configure any context-specific configuration.
#
DB_DIR=/var/lib/$TITAN_IDENTITY/mnt/_db
if [[ $TITAN_CONTEXT = "docker-zfs" ]]; then
  mount_database $DB_DIR
  start_database $DB_DIR

  # Forward docker volume requests to titan-server
  /titan/docker-volume-proxy /run/docker/plugins/$TITAN_IDENTITY.sock > /var/log/docker-proxy.log 2>&1 &

  exec java -Dtitan.context=$TITAN_CONTEXT -Dtitan.contextConfig=pool=$TITAN_IDENTITY -jar /titan/titan-server.jar
elif [[ $TITAN_CONTEXT = "kubernetes-csi" ]]; then
  start_database $DB_DIR

  exec java -Dtitan.context=$TITAN_CONTEXT -Dtitan.contextConfig=$TITAN_CONFIG -jar /titan/titan-server.jar
else
  log_error "Unknown context $TITAN_CONTEXT"
fi
